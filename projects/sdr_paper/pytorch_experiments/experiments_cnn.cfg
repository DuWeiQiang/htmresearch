[DEFAULT]

repetitions = 1
iterations = 20             # Number of training epochs
batch_size = 64             # mini batch size
batches_in_epoch = 100000
test_batch_size = 1000

learning_rate = 0.01
learning_rate_factor = 1.0
momentum = 0.25
boost_strength = 2.0
boost_strength_factor = 1.0
seed = 42
n = 100
k = 100
weight_sparsity = 1.0
k_inference_factor = 1.0

no_cuda = False             # If True, disables CUDA training
log_interval = 1000         # how many minibatches to wait before logging
create_plots = False
test_noise_every_epoch = True # If False, will only test noise at end

path = results
datadir = "data"

optimizer = SGD

; CNN specific parameters
use_cnn = True
c1_out_channels = 20
c1_k = 2000000
dropout = 0.0

[cnnQuick]
c1_out_channels = 3
c1_k = 10
n = 30
k = 30
iterations = 1
boost_strength = 1.0
boost_strength_factor = [0.9]
learning_rate = 0.02
learning_rate_factor = 0.85
weight_sparsity = 0.4
k_inference_factor = 1.5
use_cnn = True
use_dropout = False
log_interval = 2000
test_noise_every_epoch = False
batches_in_epoch = 40
create_plots = False
batch_size = 4


;[bestSparseCNN]
;c1_out_channels = 30
;c1_k = 400
;n = 150
;k = 50
;iterations = 8
;boost_strength = 1.4
;boost_strength_factor = 0.85
;learning_rate = 0.02
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;dropout = 0.0
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Various older experiments below
;

;[cnn6]
;c1_out_channels = [25,30,35]
;c1_k = [400,350,450]
;n = [100,150]
;k = 10
;iterations = 15
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.01
;learning_rate_factor = [0.8, 0.7]
;weight_sparsity = [0.4, 0.35, 0.3]
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; How important is weight sparsity?
;[cnn7]
;c1_out_channels = 30
;c1_k = 400
;n = [100,150]
;k = 10
;iterations = 15
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.01
;learning_rate_factor = 0.7
;weight_sparsity = [1.0, 0.8, 0.6, 0.4]
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Testing k
;[cnn8]
;c1_out_channels = 30
;c1_k = 450
;n = 150
;k = [150,50]
;iterations = 15
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.01
;learning_rate_factor = 0.7
;weight_sparsity = [0.3]
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Testing n/k with momentum=0.25
;[cnn9]
;c1_out_channels = 30
;c1_k = [450, 400]
;n = [150, 300, 500]
;k = [50]
;iterations = 12
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.01
;learning_rate_factor = 0.7
;weight_sparsity = [0.3, 0.2, 0.1]
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Testing learning rate and learning schedule
;[cnn10]
;c1_out_channels = 30
;c1_k = 400
;n = 150
;k = 50
;iterations = 15
;boost_strength = 1.2
;boost_strength_factor = 0.85
;momentum = 0.0
;learning_rate = [0.1, 0.075, 0.05, 0.025, 0.01]
;learning_rate_factor = [0.5, 0.6, 0.7, 0.8]
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = [4000, 2000, 1000]
;create_plots = False
;batch_size = 4


; Testing n/k, with momentum = 0
;[cnn11]
;c1_out_channels = 30
;c1_k = [450, 400]
;n = [150, 300, 500]
;k = [50]
;iterations = 12
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.01
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = [0.3, 0.2, 0.1]
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Best of cnn9 with higher learning rate. Good accuracy. Iteration 5 has high
; accuracy (98.6) and decent noise (99K), but latter drops a bit afterwards.
;[cnn12]
;c1_out_channels = 30
;c1_k = 400
;n = 150
;k = 50
;iterations = 12
;boost_strength = 1.2
;boost_strength_factor = 0.85
;learning_rate = 0.02
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Like 12 but slightly higher boost and learning rate, and more iterations
; Got best accuracy (98.56%) and noise combination (100K).
; The highest accuracy one (98.8%) did not have great noise robustness (95K)
;[cnn13]
;c1_out_channels = 30
;c1_k = 400
;n = 150
;k = 50
;iterations = 20
;boost_strength = [1.2, 1.3, 1.4]
;boost_strength_factor = 0.85
;learning_rate = [0.03, 0.02]
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Like 13 but higher boost and learning rates
; These got great accuracy (98.8%) but low noise robustness
;[cnn14]
;c1_out_channels = 30
;c1_k = 400
;n = 150
;k = 50
;iterations = 12
;boost_strength = [1.3, 1.4, 1.5]
;boost_strength_factor = 0.85
;learning_rate = [0.05, 0.04]
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

; Like cnn14 but increasing N to get higher sparsity
;[cnn15]
;c1_out_channels = 30
;c1_k = 400
;n = [200, 250, 300]
;k = [25, 50]
;iterations = 10
;boost_strength = 1.5
;boost_strength_factor = 0.85
;learning_rate = 0.05
;momentum = 0.0
;learning_rate_factor = 0.7
;weight_sparsity = 0.3
;k_inference_factor = 1.5
;use_cnn = True
;use_dropout = False
;log_interval = 2000
;test_noise_every_epoch = True
;batches_in_epoch = 4000
;create_plots = False
;batch_size = 4

